services:
  - type: web
    name: blog-example
    env: node
    plan: starter
    region: frankfurt
    autoDeploy: true

    # Ensure DATABASE_URL is available at build time for Prisma Client generation
    buildCommand: sh -c "npm ci && npx prisma generate && npm run build"

    # Run migrations on boot, then start Next.js
    startCommand: |
      npx prisma migrate deploy && npm run start

    # Health check
    healthCheckPath: /

    envVars:
      - key: NODE_ENV
        value: production
      - key: NODE_VERSION
        value: 20
      # DATABASE_URL will be injected from the managed database below.
      - key: DATABASE_URL
        fromDatabase:
          name: blog-example-db
          property: connectionString
      # Add your secrets below in Render Dashboard if you don't want to commit them here.
      # Keeping them listed helps as a checklist.
      - key: NEXTAUTH_URL
        fromService:
          name: blog-example
          property: url
      - key: NEXTAUTH_SECRET
        sync: false
      - key: ADMIN_EMAILS
        sync: false
      - key: GOOGLE_CLIENT_ID
        sync: false
      - key: GOOGLE_CLIENT_SECRET
        sync: false
      - key: TWITTER_CLIENT_ID
        sync: false
      - key: TWITTER_CLIENT_SECRET
        sync: false
      - key: CLOUDINARY_CLOUD_NAME
        sync: false
      - key: CLOUDINARY_API_KEY
        sync: false
      - key: CLOUDINARY_API_SECRET
        sync: false

# Provision a managed Postgres database and wire DATABASE_URL automatically
# If you already have a database, you can remove this block and set DATABASE_URL manually in the service env vars.
databases:
  - name: blog-example-db
    plan: starter
    region: frankfurt
