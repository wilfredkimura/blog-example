// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// User roles for access control
enum Role {
  USER
  ADMIN
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  role          Role     @default(USER)
  passwordHash  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accounts Account[]
  sessions Session[]
  posts    Post[]    @relation("AuthorPosts")
  comments Comment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id               String   @id @default(cuid())
  title            String
  content          String
  date             DateTime @default(now())
  imageUrl         String?
  videoUrl         String?
  kiswahiliTitle   String?
  kiswahiliContent String?
  published        Boolean  @default(true)

  // Relations
  authorId   String
  author     User           @relation("AuthorPosts", fields: [authorId], references: [id])
  comments   Comment[]
  categories PostCategory[]
  tags       PostTag[]
  images     PostImage[]
}

model Category {
  id    String         @id @default(cuid())
  name  String         @unique
  posts PostCategory[]
}

model Tag {
  id    String    @id @default(cuid())
  name  String    @unique
  posts PostTag[]
}

// Join tables for many-to-many
model PostCategory {
  postId     String
  categoryId String
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
}

model PostTag {
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
}

model PostImage {
  id       String @id @default(cuid())
  postId   String
  url      String
  position Int    @default(0)

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@index([postId, position])
}

model Subscription {
  id    String   @id @default(cuid())
  email String   @unique
  date  DateTime @default(now())
}

model Comment {
  id       String   @id @default(cuid())
  postId   String
  author   String
  content  String
  date     DateTime @default(now())
  approved Boolean  @default(false)

  post   Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}
